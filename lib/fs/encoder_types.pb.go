// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/fs/encoder_types.proto

package fs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncoderType int32

const (
	// The "None" filename encoder does not encode filenames, and it's only
	// instantiated in our test suite. They are not used in non-test code.
	EncoderTypeNone EncoderType = 0
	// The "FAT" filename encoder encodes characters reserved on
	// vFAT/exFAT/NTFS/reFS and similar filesystems. It does not encode
	// filenames ending with spaces or periods, which are accepted on Android,
	// but are rejected on Windows. It also does not encode Windows' reserved
	// filenames, such as `NUL` or `CON.txt`.
	EncoderTypeFat EncoderType = 1
	// Unset is not a filename encoder. It is only used to allow us to override
	// the default encoder type to FAT on Windows, if the user hasn't set the
	// default themselves.
	EncoderTypeUnset EncoderType = -1
)

var EncoderType_name = map[int32]string{
	0:  "ENCODER_TYPE_NONE",
	1:  "ENCODER_TYPE_FAT",
	-1: "ENCODER_TYPE_UNSET",
}

var EncoderType_value = map[string]int32{
	"ENCODER_TYPE_NONE":  0,
	"ENCODER_TYPE_FAT":   1,
	"ENCODER_TYPE_UNSET": -1,
}

func (EncoderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f100a0ee08f440d, []int{0}
}

func init() {
	proto.RegisterEnum("fs.EncoderType", EncoderType_name, EncoderType_value)
}

func init() { proto.RegisterFile("lib/fs/encoder_types.proto", fileDescriptor_4f100a0ee08f440d) }

var fileDescriptor_4f100a0ee08f440d = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0xc9, 0x4c, 0xd2,
	0x4f, 0x2b, 0xd6, 0x4f, 0xcd, 0x4b, 0xce, 0x4f, 0x49, 0x2d, 0x8a, 0x2f, 0xa9, 0x2c, 0x48, 0x2d,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x2b, 0x96, 0x52, 0x2e, 0x4a, 0x2d, 0xc8,
	0x2f, 0xd6, 0x07, 0x0b, 0x24, 0x95, 0xa6, 0xe9, 0xa7, 0xe7, 0xa7, 0xe7, 0x83, 0x39, 0x60, 0x16,
	0x44, 0xa1, 0xd6, 0x02, 0x46, 0x2e, 0x6e, 0x57, 0x88, 0x01, 0x21, 0x95, 0x05, 0xa9, 0x42, 0x5a,
	0x5c, 0x82, 0xae, 0x7e, 0xce, 0xfe, 0x2e, 0xae, 0x41, 0xf1, 0x21, 0x91, 0x01, 0xae, 0xf1, 0x7e,
	0xfe, 0x7e, 0xae, 0x02, 0x0c, 0x52, 0xc2, 0x5d, 0x73, 0x15, 0xf8, 0x91, 0xd4, 0xf9, 0xe5, 0xe7,
	0xa5, 0x0a, 0x69, 0x70, 0x09, 0xa0, 0xa8, 0x75, 0x73, 0x0c, 0x11, 0x60, 0x94, 0x12, 0xea, 0x9a,
	0xab, 0xc0, 0x87, 0xa4, 0xd4, 0x2d, 0xb1, 0x44, 0xc8, 0x94, 0x4b, 0x08, 0x45, 0x65, 0xa8, 0x5f,
	0xb0, 0x6b, 0x88, 0xc0, 0x7f, 0x18, 0x60, 0x94, 0x12, 0xe9, 0x9a, 0xab, 0x20, 0x80, 0xa4, 0x29,
	0x34, 0xaf, 0x38, 0xb5, 0x44, 0x8a, 0x65, 0xc5, 0x12, 0x39, 0x06, 0x27, 0xf7, 0x13, 0x0f, 0xe5,
	0x18, 0x2e, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x16, 0x3c, 0x96, 0x63, 0xbc, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28,
	0xd5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xe2, 0xca, 0xbc, 0xe4,
	0x92, 0x8c, 0xcc, 0xbc, 0x74, 0x24, 0x16, 0x24, 0xa0, 0x92, 0xd8, 0xc0, 0x5e, 0x36, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xb7, 0x17, 0xc4, 0x89, 0x39, 0x01, 0x00, 0x00,
}
