// Copyright (C) 2024 The Syncthing Authors.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

//go:build ignore
// +build ignore

// Command maketables generates default_table.go and android_table.go via:
//
//	go run maketables.go -o default_table.go
//	go run maketables.go -android -o android_table.go
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode/utf8"

	"github.com/syncthing/syncthing/lib/encoding/fat/consts"
)

var tpl = template.Must(template.New("fat").Parse("" +
	`// generated by {{.CommandLine}}; DO NOT EDIT

// Copyright (C) 2024 The Syncthing Authors.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at https://mozilla.org/MPL/2.0/.

{{.BuildComments}}

package fat

// puaEncodes contains the encoding table for the PUA encoder.
var puaEncodes = [256]rune{
	{{.PUAEncodes}}
}

// puaPatternEncodes contains the encoding table for encoding glob patterns
// with the PUAPattern encoder.
var puaPatternEncodes = [256]rune{
	{{.PUAPatternEncodes}}
}

`))

type templateVars struct {
	CommandLine       string
	BuildComments     string
	PUAEncodes        string
	PUAPatternEncodes string
}

func main() {
	var outfile string
	var android bool
	flag.StringVar(&outfile, "o", "", "Name of output file (default stdout)")
	flag.BoolVar(&android, "android", false, "Build for android")
	flag.Parse()

	fatEncodes := consts.Encodes
	if android {
		// To run with GOOS=android requires cgo
		fatEncodes += "\x7f"
	}

	encodeMap := make(map[int]rune, consts.NumChars)
	patternEncodeMap := make(map[int]rune, consts.NumChars)

	for c := 0; c < consts.NumChars; c++ {
		encodeMap[c] = rune(c)
		patternEncodeMap[c] = rune(c)
	}

	for _, r := range fatEncodes {
		if strings.ContainsRune(consts.Nevers, r) {
			log.Fatalf("bug: the %q character cannot be encoded)", string(r))
		}
		if r < 0 || r >= consts.NumChars {
			log.Fatalf("bug: the %q character cannot be encoded (as its Unicode "+
				"value (%d) is above %d)", string(r), r, consts.NumChars-1)
		}

		c := int(r)
		encodeMap[c] = r | consts.BaseRune

		if !strings.ContainsRune(consts.PatternNevers, r) {
			patternEncodeMap[c] = r | consts.BaseRune
		}
	}

	encodes := ""
	patternEncodes := ""
	for c := 0; c < consts.NumChars; c++ {
		encodes += string(encodeMap[c])
	}
	for c := 0; c < consts.NumChars; c++ {
		patternEncodes += string(patternEncodeMap[c])
	}

	var buf bytes.Buffer
	wrapAfter := 8
	commandLine := "go run maketables.go -o default_table.go"
	buildComments := "//go:build !android\n// +build !android"
	if android {
		commandLine = "go run maketables.go -android -o android_table.go"
		buildComments = "//go:build android\n// +build android"
	}

	tpl.Execute(&buf, templateVars{
		CommandLine:   commandLine,
		BuildComments: buildComments,
		// Easier to read than fmt.Sprintf("%q", encodes).
		PUAEncodes:        wrappedRunes(encodes, wrapAfter),
		PUAPatternEncodes: wrappedRunes(patternEncodes, wrapAfter),
	})
	bs, err := format.Source(buf.Bytes())
	if err != nil {
		out := io.Writer(os.Stdout)
		out.Write(buf.Bytes())

		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	out := io.Writer(os.Stdout)
	if outfile != "" {
		out, err = os.Create(outfile)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		}
	}
	out.Write(bs)
}

func wrappedRunes(input string, wrapAfter int) string {
	runes := utf8.RuneCountInString(input)
	wrapped := ""
	i := 0
	for _, r := range input {
		if i > 0 && i%wrapAfter == 0 {
			wrapped += "\n"
			if i < runes {
				wrapped += "\t"
			}
		}
		if i%wrapAfter != 0 {
			wrapped += " "
		}
		wrapped += fmt.Sprintf("'\\u%04x',", r)
		i++
	}
	return wrapped
}
